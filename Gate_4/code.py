# -*- coding: utf-8 -*-
"""Untitled53.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18vaHxqzh-0A0eGiHd2HvRwWN7x0MEhMZ
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft
from sklearn import metrics

N = 500
x = np.linspace(-5,5, N)

#Computing fourier transform of e^(-3x^2)
f_1 = np.exp(-3*x**2)
f_1_fourier = [10*np.mean(f_1 * np.exp(-1j * 2 * np.pi * f * x)) for f in x]

plt.plot(x, np.real(f_1_fourier), label='f(t) = e^(-3x^2)', color='r')

#Computing fourier transform of e^(-pix^2)
f_2 = np.exp(-np.pi*x**2)
f_2_fourier = [10*np.mean(f_2 * np.exp(-1j * 2 * np.pi * f * x)) for f in x]

plt.plot(x, np.real(f_2_fourier), label='f(t) = e^(-pi*x^2)', color='b')

plt.xlabel('f')
plt.ylabel('$F(f)$')
plt.grid()
plt.legend(loc = "best")
plt.show()

#The plots are of the form Ae^(-Bf^2)
#As 3 and pi are close numbers, the fourier transforms are almost similar as shown in the graph below

print(f_1_fourier)
print(f_2_fourier)